package io.redeasy.shopcar.resource;

import java.net.URI;
import java.util.List;

import io.redeasy.shopShop.entity.Shop;
import io.redeasy.shopShop.entity.Shop;
import io.redeasy.shopShop.repository.ShopRepository;
import io.redeasy.shopShop.repository.ShopRepository;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

@Path("/Shops")
public class ShopResource {

   @Inject
   ShopRepository ShopRepository;
   
   @Inject
   ShopRepository shopRepository;
   
   @GET
   @Produces(MediaType.APPLICATION_JSON)
   public Response getAll() {
	   List<Shop> Shops = ShopRepository.listAll();
	   return Response.ok(Shops).build();
   }
   
   @GET
   @Produces(MediaType.APPLICATION_JSON)
   @Path("{id}")
   public Response getById(@PathParam("id") Long id) {
	   Shop Shop = ShopRepository.findById(id);
	   if(ShopRepository.isPersistent(Shop)) {
		   return Response.ok(Shop).build();
	   }
	   return Response.status(Response.Status.NOT_FOUND).build();
   }
   
   @GET
   @Produces(MediaType.APPLICATION_JSON)
   @Path("brand/{brand}")
   public Response getByBrand(@PathParam("brand") String brand) {
	   List<Shop> Shops = ShopRepository.list("SELECT c FROM Shop  c WHERE c.brand = ?1 ORDER BY id DESC", brand);
	   return Response.ok(Shops).build();
   }
   
   @POST
   @Transactional
   @Produces(MediaType.APPLICATION_JSON)
   @Consumes(MediaType.APPLICATION_JSON)
   public Response create(Shop Shop) {
	   ShopRepository.persist(Shop);
	   if(ShopRepository.isPersistent(Shop)) {
		   return Response.created(URI.create("Shops" +  Shop.id)).build();
	   }
	   return Response.status(Response.Status.BAD_REQUEST).build();
   }
   
   @DELETE
   @Transactional
   @Path("{id}")
   public Response deleteById(@PathParam("id") Long id) {
	   boolean deleted = ShopRepository.deleteById(id);
	   if(deleted) {
		   return Response.noContent().build();
	   }
	   return Response.status(Response.Status.BAD_REQUEST).build();
   }
   
  
}
